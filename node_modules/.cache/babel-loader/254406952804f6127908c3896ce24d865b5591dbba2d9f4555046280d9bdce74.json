{"ast":null,"code":"import _objectSpread from\"C:/Users/ayush/Documents/GitHub/E-commerce/e-commerce/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{Response}from\"miragejs\";import{formatDate,requiresAuth}from\"../utils/authUtils\";/**\r\n * All the routes related to Cart are present here.\r\n * These are private routes.\r\n * Client needs to add \"authorization\" header with JWT token in it to access it.\r\n * */ /**\r\n * This handler handles getting items to user's cart.\r\n * send GET Request at /api/user/cart\r\n * */export var getCartItemsHandler=function getCartItemsHandler(schema,request){var userId=requiresAuth.call(this,request);if(!userId){return new Response(404,{},{errors:[\"The email you entered is not Registered. Not Found error\"]});}var userCart=schema.users.findBy({_id:userId}).cart;return new Response(200,{},{cart:userCart});};/**\r\n * This handler handles adding items to user's cart.\r\n * send POST Request at /api/user/cart\r\n * body contains {product}\r\n * */export var addItemToCartHandler=function addItemToCartHandler(schema,request){var userId=requiresAuth.call(this,request);try{if(!userId){return new Response(404,{},{errors:[\"The email you entered is not Registered. Not Found error\"]});}var userCart=schema.users.findBy({_id:userId}).cart;var _JSON$parse=JSON.parse(request.requestBody),product=_JSON$parse.product;userCart.push(_objectSpread(_objectSpread({},product),{},{createdAt:formatDate(),updatedAt:formatDate(),qty:1}));this.db.users.update({_id:userId},{cart:userCart});return new Response(201,{},{cart:userCart});}catch(error){return new Response(500,{},{error:error});}};/**\r\n * This handler handles removing items to user's cart.\r\n * send DELETE Request at /api/user/cart/:productId\r\n * */export var removeItemFromCartHandler=function removeItemFromCartHandler(schema,request){var userId=requiresAuth.call(this,request);try{if(!userId){return new Response(404,{},{errors:[\"The email you entered is not Registered. Not Found error\"]});}var userCart=schema.users.findBy({_id:userId}).cart;var productId=request.params.productId;userCart=userCart.filter(function(item){return item._id!==productId;});this.db.users.update({_id:userId},{cart:userCart});return new Response(200,{},{cart:userCart});}catch(error){return new Response(500,{},{error:error});}};/**\r\n * This handler handles adding items to user's cart.\r\n * send POST Request at /api/user/cart/:productId\r\n * body contains {action} (whose 'type' can be increment or decrement)\r\n * */export var updateCartItemHandler=function updateCartItemHandler(schema,request){var productId=request.params.productId;var userId=requiresAuth.call(this,request);try{if(!userId){return new Response(404,{},{errors:[\"The email you entered is not Registered. Not Found error\"]});}var userCart=schema.users.findBy({_id:userId}).cart;var _JSON$parse2=JSON.parse(request.requestBody),action=_JSON$parse2.action;if(action.type===\"increment\"){userCart.forEach(function(product){if(product._id===productId){product.qty+=1;product.updatedAt=formatDate();}});}else if(action.type===\"decrement\"){userCart.forEach(function(product){if(product._id===productId){product.qty-=1;product.updatedAt=formatDate();}});}this.db.users.update({_id:userId},{cart:userCart});return new Response(200,{},{cart:userCart});}catch(error){return new Response(500,{},{error:error});}};","map":{"version":3,"names":["Response","formatDate","requiresAuth","getCartItemsHandler","schema","request","userId","call","errors","userCart","users","findBy","_id","cart","addItemToCartHandler","_JSON$parse","JSON","parse","requestBody","product","push","_objectSpread","createdAt","updatedAt","qty","db","update","error","removeItemFromCartHandler","productId","params","filter","item","updateCartItemHandler","_JSON$parse2","action","type","forEach"],"sources":["C:/Users/ayush/Documents/GitHub/E-commerce/e-commerce/src/backend/controllers/CartController.js"],"sourcesContent":["import { Response } from \"miragejs\";\r\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\r\n\r\n/**\r\n * All the routes related to Cart are present here.\r\n * These are private routes.\r\n * Client needs to add \"authorization\" header with JWT token in it to access it.\r\n * */\r\n\r\n/**\r\n * This handler handles getting items to user's cart.\r\n * send GET Request at /api/user/cart\r\n * */\r\nexport const getCartItemsHandler = function (schema, request) {\r\n  const userId = requiresAuth.call(this, request);\r\n  if (!userId) {\r\n    return new Response(\r\n      404,\r\n      {},\r\n      {\r\n        errors: [\"The email you entered is not Registered. Not Found error\"],\r\n      }\r\n    );\r\n  }\r\n  const userCart = schema.users.findBy({ _id: userId }).cart;\r\n  return new Response(200, {}, { cart: userCart });\r\n};\r\n\r\n/**\r\n * This handler handles adding items to user's cart.\r\n * send POST Request at /api/user/cart\r\n * body contains {product}\r\n * */\r\n\r\nexport const addItemToCartHandler = function (schema, request) {\r\n  const userId = requiresAuth.call(this, request);\r\n  try {\r\n    if (!userId) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\"The email you entered is not Registered. Not Found error\"],\r\n        }\r\n      );\r\n    }\r\n    const userCart = schema.users.findBy({ _id: userId }).cart;\r\n    const { product } = JSON.parse(request.requestBody);\r\n    userCart.push({\r\n      ...product,\r\n      createdAt: formatDate(),\r\n      updatedAt: formatDate(),\r\n      qty: 1,\r\n    });\r\n    this.db.users.update({ _id: userId }, { cart: userCart });\r\n    return new Response(201, {}, { cart: userCart });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles removing items to user's cart.\r\n * send DELETE Request at /api/user/cart/:productId\r\n * */\r\n\r\nexport const removeItemFromCartHandler = function (schema, request) {\r\n  const userId = requiresAuth.call(this, request);\r\n  try {\r\n    if (!userId) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\"The email you entered is not Registered. Not Found error\"],\r\n        }\r\n      );\r\n    }\r\n    let userCart = schema.users.findBy({ _id: userId }).cart;\r\n    const productId = request.params.productId;\r\n    userCart = userCart.filter((item) => item._id !== productId);\r\n    this.db.users.update({ _id: userId }, { cart: userCart });\r\n    return new Response(200, {}, { cart: userCart });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles adding items to user's cart.\r\n * send POST Request at /api/user/cart/:productId\r\n * body contains {action} (whose 'type' can be increment or decrement)\r\n * */\r\n\r\nexport const updateCartItemHandler = function (schema, request) {\r\n  const productId = request.params.productId;\r\n  const userId = requiresAuth.call(this, request);\r\n  try {\r\n    if (!userId) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\"The email you entered is not Registered. Not Found error\"],\r\n        }\r\n      );\r\n    }\r\n    const userCart = schema.users.findBy({ _id: userId }).cart;\r\n    const { action } = JSON.parse(request.requestBody);\r\n    if (action.type === \"increment\") {\r\n      userCart.forEach((product) => {\r\n        if (product._id === productId) {\r\n          product.qty += 1;\r\n          product.updatedAt = formatDate();\r\n        }\r\n      });\r\n    } else if (action.type === \"decrement\") {\r\n      userCart.forEach((product) => {\r\n        if (product._id === productId) {\r\n          product.qty -= 1;\r\n          product.updatedAt = formatDate();\r\n        }\r\n      });\r\n    }\r\n    this.db.users.update({ _id: userId }, { cart: userCart });\r\n    return new Response(200, {}, { cart: userCart });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}